classdef APP < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        APPPROJECTPOMUIFigure           matlab.ui.Figure
        UIAxes                          matlab.ui.control.UIAxes
        Slider                          matlab.ui.control.Slider
        SelectButton                    matlab.ui.control.Button
        SelectfilesforsegmentationLabel  matlab.ui.control.Label
        ThresholdingAllButton           matlab.ui.control.Button
        ThresholdingforalllayersLabel   matlab.ui.control.Label
        LAYERLabel                      matlab.ui.control.Label
        Label                           matlab.ui.control.Label
        ThresholdingforselectedlayerLabel  matlab.ui.control.Label
        ThresholdingSelctButton         matlab.ui.control.Button
        WLEditFieldLabel                matlab.ui.control.Label
        WLEditField                     matlab.ui.control.EditField
        WWEditFieldLabel                matlab.ui.control.Label
        WWEditField                     matlab.ui.control.EditField
        Switch                          matlab.ui.control.Switch
        MorphologicalimageclosureLabel  matlab.ui.control.Label
        ApplyMorphButton                matlab.ui.control.Button
        Display3DmodelLabel             matlab.ui.control.Label
        Display3DButton                 matlab.ui.control.Button
        DmodeltoSTLfileLabel            matlab.ui.control.Label
        Convert2STLButton               matlab.ui.control.Button
    end

    
    properties (Access = private)
        PICTURE = 'DICOM'; 
        D_FILES;
        D_PATH;
        BW_FILES;
        BW_PATH;
    end
    

    % Callbacks that handle component events
    methods (Access = private)

        % Button pushed function: SelectButton
        function SelectButtonPushed(app, event)
            path = uigetdir(pwd,'Open Catalog With Files for Segmentation');
            cd(path)
            app.D_PATH = path;
            
            fileInfo = dir(path);
            files = strings(69,1);
            for i = 1:69
                files(i,1) = convertCharsToStrings(fileInfo(i).name);
            end
            files = files(3:end,1);
            
            app.D_FILES = files;
            IMG = dicomread(app.D_FILES(1));
            IMG = imadjust(IMG);
            imshow(IMG,'parent',app.UIAxes);
        end

        % Button pushed function: ThresholdingAllButton
        function ThresholdingAllButtonPushed(app, event)
            newPath = uigetdir(pwd,'Select a folder to save files');
            app.BW_PATH = newPath;
            
            for i = 1:numel(app.D_FILES)
                fileName = char(app.D_FILES(i));
                flieLocation = char([app.D_PATH '\' fileName]);
                IMG = dicomread(flieLocation);
                
                WW = str2double(app.WWEditField.Value);
                WL = str2double(app.WLEditField.Value);
                L = WL - WW/2;
                U = WL + WW/2;
                
                IMG = double(IMG);
                IMG(IMG < L) = 0;
                IMG(IMG > U) = 255;
                
                BW = imbinarize(IMG,'global');
                BW2 = imfill(BW,'holes');
                
                if (i < 10)
                    newName = ['BW0',int2str(i)];
                    save([newPath '\' newName],'BW2')
                    app.BW_FILES{i} = char(newName);
                else
                    newName = ['BW',int2str(i)];
                    save([newPath '\' newName],'BW2')
                    app.BW_FILES{i} = char(newName);
                end
                if (i==app.Slider.Value)
                    app.Switch.Value = 'BW';
                    app.PICTURE = 'BW';
                    imshow(BW2,'parent',app.UIAxes);
                end
            end
        end

        % Button pushed function: ThresholdingSelctButton
        function ThresholdingSelctButtonPushed(app, event)
            layer = app.Slider.Value;
            fileName = char(app.D_FILES(layer));
            flieLocation = char([app.D_PATH '\' fileName]);
            IMG = dicomread(flieLocation);
            
            WW = str2double(app.WWEditField.Value);
            WL = str2double(app.WLEditField.Value);
            L = WL - WW/2;
            U = WL + WW/2;
            
            IMG = double(IMG);
            IMG(IMG < L) = 0;
            IMG(IMG > U) = 255;
            
            BW = imbinarize(IMG,'global');
            BW2 = imfill(BW,'holes');
            
            newPath = app.BW_PATH;
            save([newPath '\' fileName],'BW2')
            imshow(BW2,'parent',app.UIAxes);
        end

        % Value changed function: Slider
        function SliderValueChanged(app, event)
            value = app.Slider.Value;
            [~, minIdx] = min(abs(value - event.Source.MajorTicks(:)));
            event.Source.Value = event.Source.MajorTicks(minIdx);
            value = event.Source.MajorTicks(minIdx);
            app.Label.Text = sprintf('%d',value);

            if (strcmp(app.PICTURE,'DICOM'))
                cd(app.D_PATH);
                IMG = dicomread(char(app.D_FILES(value)));
                IMG = imadjust(IMG);
                imshow(IMG,'parent',app.UIAxes);
            end
            
            if (strcmp(app.PICTURE,'BW'))
                cd(app.BW_PATH);
                BW2 = cell2mat(struct2cell(load(char(app.BW_FILES(:,value)),'BW2')));
                imshow(BW2,'parent',app.UIAxes);
            end
        end

        % Value changed function: Switch
        function SwitchValueChanged(app, event)
            fileType = app.Switch.Value;
            app.PICTURE = fileType;
            value = app.Slider.Value;
            
            if (strcmp(app.PICTURE,'DICOM'))
                cd(app.D_PATH);
                IMG = dicomread(char(app.D_FILES(value)));
                IMG = imadjust(IMG);
                imshow(IMG,'parent',app.UIAxes);
            end
            
            if (strcmp(app.PICTURE,'BW'))
                cd(app.BW_PATH);
                BW2 = cell2mat(struct2cell(load(char(app.BW_FILES(:,value)),'BW2')));
                imshow(BW2,'parent',app.UIAxes);
            end
        end

        % Button pushed function: ApplyMorphButton
        function ApplyMorphButtonPushed(app, event)
            newPath = app.BW_PATH;
            cd(newPath);
            
            for i = 1:numel(app.D_FILES)
                filename = app.BW_FILES{i};
                BW = load(filename);
                BW = BW.BW2;
                
                r = 8;
                n = 4;
                SE = strel('disk',r,n);
                BW2 = imclose(BW,SE);
                BW2 = imfill(BW2,'holes');
                
                newName = ['BW',int2str(i)];
                save([newPath '\' newName],'BW2')
                
                if (i==app.Slider.Value)
                    app.Switch.Value = 'BW';
                    app.PICTURE = 'BW';
                    imshow(BW2,'parent',app.UIAxes);
                end
            end
        end

        % Button pushed function: Display3DButton
        function Display3DButtonPushed(app, event)
            newPath = app.BW_PATH;
            cd(newPath);
            model3D = zeros(512,512);
            for i = 1:numel(app.D_FILES)
                if (i < 10)
                    filename = [newPath,'\BW0', int2str(i)];
                    BW = load(filename);
                    BW = BW.BW2;
                    model3D(:,:,i) = BW;
                else
                    filename = [newPath,'\BW', int2str(i)];
                    BW = load(filename);
                    BW = BW.BW2;
                    model3D(:,:,i) = BW;
                end
            end
            Data = model3D;
            changePath = fullfile(newPath, '..');
            cd(changePath);
            savedPath = pwd;
            save([savedPath '\MODEL3D.mat'],'Data')
            
            D = squeeze(Data);
            figure('Name','3D MODEL','NumberTitle','off');
            h = vol3d('cdata',D,'texture','3D');
            
            view(3);  
            axis tight;  daspect([1 1 0.3])
            colormap(bone(1));
            alphamap('rampup');
            alphamap(.06 .* alphamap);
            
        end

        % Button pushed function: Convert2STLButton
        function Convert2STLButtonPushed(app, event)
            newPath = app.BW_PATH;
            changePath = fullfile(newPath, '..');
            cd(changePath);
            
            arr = load('MODEL3D.mat');
            Data = arr.Data; 
           
            scaleX = 0.4;
            scaleY = 0.4;
            scaleZ = 1.3;
            
            [Vertices, Triangle, Quads] = make_STL_of_Array('MODEL3D_STL.stl',Data,scaleX,scaleY,scaleZ);  
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create APPPROJECTPOMUIFigure and hide until all components are created
            app.APPPROJECTPOMUIFigure = uifigure('Visible', 'off');
            app.APPPROJECTPOMUIFigure.Position = [100 100 640 480];
            app.APPPROJECTPOMUIFigure.Name = 'APP PROJECT POM';

            % Create UIAxes
            app.UIAxes = uiaxes(app.APPPROJECTPOMUIFigure);
            title(app.UIAxes, '')
            xlabel(app.UIAxes, '')
            ylabel(app.UIAxes, '')
            app.UIAxes.XTick = [];
            app.UIAxes.YTick = [];
            app.UIAxes.Color = 'none';
            app.UIAxes.Visible = 'off';
            app.UIAxes.Position = [21 80 422 365];

            % Create Slider
            app.Slider = uislider(app.APPPROJECTPOMUIFigure);
            app.Slider.Limits = [1 67];
            app.Slider.MajorTicks = [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67];
            app.Slider.MajorTickLabels = {'', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''};
            app.Slider.ValueChangedFcn = createCallbackFcn(app, @SliderValueChanged, true);
            app.Slider.MinorTicks = [];
            app.Slider.Position = [21 36 422 3];
            app.Slider.Value = 1;

            % Create SelectButton
            app.SelectButton = uibutton(app.APPPROJECTPOMUIFigure, 'push');
            app.SelectButton.ButtonPushedFcn = createCallbackFcn(app, @SelectButtonPushed, true);
            app.SelectButton.Position = [486 386 100 22];
            app.SelectButton.Text = 'Select';

            % Create SelectfilesforsegmentationLabel
            app.SelectfilesforsegmentationLabel = uilabel(app.APPPROJECTPOMUIFigure);
            app.SelectfilesforsegmentationLabel.Position = [458 407 156 22];
            app.SelectfilesforsegmentationLabel.Text = 'Select files for segmentation';

            % Create ThresholdingAllButton
            app.ThresholdingAllButton = uibutton(app.APPPROJECTPOMUIFigure, 'push');
            app.ThresholdingAllButton.ButtonPushedFcn = createCallbackFcn(app, @ThresholdingAllButtonPushed, true);
            app.ThresholdingAllButton.Position = [486 286 100 22];
            app.ThresholdingAllButton.Text = 'Thresholding';

            % Create ThresholdingforalllayersLabel
            app.ThresholdingforalllayersLabel = uilabel(app.APPPROJECTPOMUIFigure);
            app.ThresholdingforalllayersLabel.Position = [464 307 143 22];
            app.ThresholdingforalllayersLabel.Text = 'Thresholding for all layers';

            % Create LAYERLabel
            app.LAYERLabel = uilabel(app.APPPROJECTPOMUIFigure);
            app.LAYERLabel.Position = [100 60 44 22];
            app.LAYERLabel.Text = 'LAYER';

            % Create Label
            app.Label = uilabel(app.APPPROJECTPOMUIFigure);
            app.Label.Position = [173 60 25 22];
            app.Label.Text = '1';

            % Create ThresholdingforselectedlayerLabel
            app.ThresholdingforselectedlayerLabel = uilabel(app.APPPROJECTPOMUIFigure);
            app.ThresholdingforselectedlayerLabel.Position = [455 247 170 22];
            app.ThresholdingforselectedlayerLabel.Text = 'Thresholding for selected layer';

            % Create ThresholdingSelctButton
            app.ThresholdingSelctButton = uibutton(app.APPPROJECTPOMUIFigure, 'push');
            app.ThresholdingSelctButton.ButtonPushedFcn = createCallbackFcn(app, @ThresholdingSelctButtonPushed, true);
            app.ThresholdingSelctButton.Position = [486 226 100 22];
            app.ThresholdingSelctButton.Text = 'Thresholding';

            % Create WLEditFieldLabel
            app.WLEditFieldLabel = uilabel(app.APPPROJECTPOMUIFigure);
            app.WLEditFieldLabel.HorizontalAlignment = 'right';
            app.WLEditFieldLabel.Position = [494 328 25 22];
            app.WLEditFieldLabel.Text = 'WL';

            % Create WLEditField
            app.WLEditField = uieditfield(app.APPPROJECTPOMUIFigure, 'text');
            app.WLEditField.Position = [537 328 49 22];
            app.WLEditField.Value = '1500';

            % Create WWEditFieldLabel
            app.WWEditFieldLabel = uilabel(app.APPPROJECTPOMUIFigure);
            app.WWEditFieldLabel.HorizontalAlignment = 'right';
            app.WWEditFieldLabel.Position = [494 349 28 22];
            app.WWEditFieldLabel.Text = 'WW';

            % Create WWEditField
            app.WWEditField = uieditfield(app.APPPROJECTPOMUIFigure, 'text');
            app.WWEditField.Position = [537 349 49 22];
            app.WWEditField.Value = '300';

            % Create Switch
            app.Switch = uiswitch(app.APPPROJECTPOMUIFigure, 'slider');
            app.Switch.Items = {'DICOM', 'BW'};
            app.Switch.ValueChangedFcn = createCallbackFcn(app, @SwitchValueChanged, true);
            app.Switch.Position = [342 61 45 20];
            app.Switch.Value = 'DICOM';

            % Create MorphologicalimageclosureLabel
            app.MorphologicalimageclosureLabel = uilabel(app.APPPROJECTPOMUIFigure);
            app.MorphologicalimageclosureLabel.Position = [455 186 158 22];
            app.MorphologicalimageclosureLabel.Text = 'Morphological image closure';

            % Create ApplyMorphButton
            app.ApplyMorphButton = uibutton(app.APPPROJECTPOMUIFigure, 'push');
            app.ApplyMorphButton.ButtonPushedFcn = createCallbackFcn(app, @ApplyMorphButtonPushed, true);
            app.ApplyMorphButton.Position = [486 165 100 22];
            app.ApplyMorphButton.Text = 'Apply';

            % Create Display3DmodelLabel
            app.Display3DmodelLabel = uilabel(app.APPPROJECTPOMUIFigure);
            app.Display3DmodelLabel.Position = [486 134 100 22];
            app.Display3DmodelLabel.Text = 'Display 3D model';

            % Create Display3DButton
            app.Display3DButton = uibutton(app.APPPROJECTPOMUIFigure, 'push');
            app.Display3DButton.ButtonPushedFcn = createCallbackFcn(app, @Display3DButtonPushed, true);
            app.Display3DButton.Position = [486 113 100 22];
            app.Display3DButton.Text = 'Display';

            % Create DmodeltoSTLfileLabel
            app.DmodeltoSTLfileLabel = uilabel(app.APPPROJECTPOMUIFigure);
            app.DmodeltoSTLfileLabel.Position = [477 79 118 22];
            app.DmodeltoSTLfileLabel.Text = '3D model to .STL file';

            % Create Convert2STLButton
            app.Convert2STLButton = uibutton(app.APPPROJECTPOMUIFigure, 'push');
            app.Convert2STLButton.ButtonPushedFcn = createCallbackFcn(app, @Convert2STLButtonPushed, true);
            app.Convert2STLButton.Position = [486 58 100 22];
            app.Convert2STLButton.Text = 'Convert';

            % Show the figure after all components are created
            app.APPPROJECTPOMUIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = APP

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.APPPROJECTPOMUIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.APPPROJECTPOMUIFigure)
        end
    end
end
